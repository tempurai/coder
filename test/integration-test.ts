#!/usr/bin/env node\n\n/**\n * Coder AI CLI 功能测试脚本\n * 用于验证所有新功能是否正常工作\n */\n\nimport * as fs from 'fs';\nimport * as path from 'path';\nimport { ConfigLoader, Config } from '../src/config/ConfigLoader';\nimport { SimpleAgent } from '../src/agents/SimpleAgent';\nimport { checkpointManager } from '../src/tools/CheckpointManager';\nimport { diffDisplay } from '../src/tools/EnhancedDiffDisplay';\n\n// 测试颜色输出\nconst colors = {\n    green: '\\x1b[32m',\n    red: '\\x1b[31m',\n    yellow: '\\x1b[33m',\n    cyan: '\\x1b[36m',\n    reset: '\\x1b[0m',\n    bold: '\\x1b[1m'\n};\n\nfunction log(message: string, color: string = colors.reset) {\n    console.log(`${color}${message}${colors.reset}`);\n}\n\nfunction logTest(testName: string, status: 'PASS' | 'FAIL' | 'SKIP', details?: string) {\n    const statusColor = status === 'PASS' ? colors.green : status === 'FAIL' ? colors.red : colors.yellow;\n    const statusIcon = status === 'PASS' ? '✅' : status === 'FAIL' ? '❌' : '⚠️';\n    \n    console.log(`${statusIcon} ${colors.bold}${testName}${colors.reset} - ${statusColor}${status}${colors.reset}`);\n    if (details) {\n        console.log(`   ${colors.cyan}${details}${colors.reset}`);\n    }\n}\n\n// 测试套件\nclass TestSuite {\n    private passedTests = 0;\n    private failedTests = 0;\n    private skippedTests = 0;\n    \n    async runAllTests() {\n        log('\\n🚀 开始 Coder AI CLI 功能测试', colors.bold + colors.cyan);\n        log('━'.repeat(60), colors.cyan);\n        \n        await this.testConfigSystem();\n        await this.testDiffDisplay();\n        await this.testCheckpointSystem();\n        await this.testAgentIntegration();\n        \n        this.displaySummary();\n    }\n    \n    async testConfigSystem() {\n        log('\\n📋 测试配置系统', colors.yellow);\n        \n        try {\n            // 测试配置加载\n            const configLoader = ConfigLoader.getInstance();\n            const config = configLoader.getConfig();\n            \n            if (config.model && config.temperature !== undefined) {\n                logTest('配置加载', 'PASS', `模型: ${config.model}, 温度: ${config.temperature}`);\n                this.passedTests++;\n            } else {\n                logTest('配置加载', 'FAIL', '配置对象缺少必需字段');\n                this.failedTests++;\n            }\n            \n            // 测试配置文件路径\n            const configPath = configLoader.getConfigPath();\n            if (configPath.includes('.coder-ai')) {\n                logTest('配置路径', 'PASS', `路径: ${configPath}`);\n                this.passedTests++;\n            } else {\n                logTest('配置路径', 'FAIL', '配置路径不正确');\n                this.failedTests++;\n            }\n            \n        } catch (error) {\n            logTest('配置系统', 'FAIL', `错误: ${error instanceof Error ? error.message : '未知错误'}`);\n            this.failedTests++;\n        }\n    }\n    \n    async testDiffDisplay() {\n        log('\\n🎨 测试Diff显示', colors.yellow);\n        \n        try {\n            const originalContent = 'function hello() {\\n  console.log(\"Hello World\");\\n}';\n            const modifiedContent = 'function hello() {\\n  console.log(\"Hello, AI World!\");\\n  return true;\\n}';\n            \n            // 这里只是测试diff显示对象是否存在和可用\n            if (typeof diffDisplay.displayDiff === 'function') {\n                logTest('Diff显示模块', 'PASS', '模块加载成功，方法可用');\n                this.passedTests++;\n            } else {\n                logTest('Diff显示模块', 'FAIL', 'displayDiff方法不存在');\n                this.failedTests++;\n            }\n            \n            if (typeof diffDisplay.displaySideBySideDiff === 'function') {\n                logTest('并列Diff显示', 'PASS', '并列显示功能可用');\n                this.passedTests++;\n            } else {\n                logTest('并列Diff显示', 'FAIL', '并列显示功能不可用');\n                this.failedTests++;\n            }\n            \n        } catch (error) {\n            logTest('Diff显示', 'FAIL', `错误: ${error instanceof Error ? error.message : '未知错误'}`);\n            this.failedTests++;\n        }\n    }\n    \n    async testCheckpointSystem() {\n        log('\\n💾 测试检查点系统', colors.yellow);\n        \n        try {\n            // 创建测试文件\n            const testFile = path.join(__dirname, 'test-file.txt');\n            fs.writeFileSync(testFile, 'This is a test file for checkpoint system.');\n            \n            // 测试检查点创建\n            const checkpointId = await checkpointManager.createCheckpoint(\n                [testFile],\n                'Test checkpoint creation',\n                'test'\n            );\n            \n            if (checkpointId && checkpointId.startsWith('cp_')) {\n                logTest('检查点创建', 'PASS', `检查点ID: ${checkpointId}`);\n                this.passedTests++;\n                \n                // 测试检查点列表\n                const checkpoints = checkpointManager.listCheckpoints();\n                if (checkpoints.length > 0) {\n                    logTest('检查点列表', 'PASS', `找到 ${checkpoints.length} 个检查点`);\n                    this.passedTests++;\n                } else {\n                    logTest('检查点列表', 'FAIL', '检查点列表为空');\n                    this.failedTests++;\n                }\n                \n                // 清理测试检查点\n                await checkpointManager.deleteCheckpoint(checkpointId);\n                logTest('检查点清理', 'PASS', '测试检查点已删除');\n                this.passedTests++;\n            } else {\n                logTest('检查点创建', 'FAIL', '检查点ID格式不正确');\n                this.failedTests++;\n            }\n            \n            // 清理测试文件\n            fs.unlinkSync(testFile);\n            \n        } catch (error) {\n            logTest('检查点系统', 'FAIL', `错误: ${error instanceof Error ? error.message : '未知错误'}`);\n            this.failedTests++;\n        }\n    }\n    \n    async testAgentIntegration() {\n        log('\\n🤖 测试Agent集成', colors.yellow);\n        \n        try {\n            const configLoader = ConfigLoader.getInstance();\n            const config = configLoader.getConfig();\n            \n            // 检查API Key\n            const apiKey = config.apiKey || process.env.OPENAI_API_KEY;\n            if (!apiKey) {\n                logTest('Agent初始化', 'SKIP', 'API Key未设置，跳过Agent测试');\n                this.skippedTests++;\n                return;\n            }\n            \n            // 创建Agent\n            const agent = new SimpleAgent(config);\n            \n            if (agent) {\n                logTest('Agent创建', 'PASS', '成功创建Agent实例');\n                this.passedTests++;\n            } else {\n                logTest('Agent创建', 'FAIL', 'Agent创建失败');\n                this.failedTests++;\n                return;\n            }\n            \n            // 测试配置获取\n            const agentConfig = agent.getConfig();\n            if (agentConfig.model === config.model) {\n                logTest('Agent配置', 'PASS', `配置正确应用，模型: ${agentConfig.model}`);\n                this.passedTests++;\n            } else {\n                logTest('Agent配置', 'FAIL', '配置未正确应用');\n                this.failedTests++;\n            }\n            \n            // 测试健康检查（仅在有API Key时）\n            try {\n                const healthResult = await agent.healthCheck();\n                if (healthResult.status === 'healthy') {\n                    logTest('Agent健康检查', 'PASS', healthResult.message);\n                    this.passedTests++;\n                } else {\n                    logTest('Agent健康检查', 'FAIL', healthResult.message);\n                    this.failedTests++;\n                }\n            } catch (healthError) {\n                logTest('Agent健康检查', 'FAIL', '健康检查异常');\n                this.failedTests++;\n            }\n            \n            // 测试流式输出方法存在性\n            if (typeof agent.processStream === 'function') {\n                logTest('流式输出支持', 'PASS', 'processStream方法可用');\n                this.passedTests++;\n            } else {\n                logTest('流式输出支持', 'FAIL', 'processStream方法不存在');\n                this.failedTests++;\n            }\n            \n        } catch (error) {\n            logTest('Agent集成', 'FAIL', `错误: ${error instanceof Error ? error.message : '未知错误'}`);\n            this.failedTests++;\n        }\n    }\n    \n    displaySummary() {\n        log('\\n📊 测试总结', colors.bold + colors.cyan);\n        log('━'.repeat(60), colors.cyan);\n        \n        const totalTests = this.passedTests + this.failedTests + this.skippedTests;\n        \n        logTest(`总测试数: ${totalTests}`, 'PASS');\n        logTest(`通过: ${this.passedTests}`, 'PASS');\n        \n        if (this.failedTests > 0) {\n            logTest(`失败: ${this.failedTests}`, 'FAIL');\n        }\n        \n        if (this.skippedTests > 0) {\n            logTest(`跳过: ${this.skippedTests}`, 'SKIP');\n        }\n        \n        const successRate = totalTests > 0 ? ((this.passedTests / totalTests) * 100).toFixed(1) : '0';\n        log(`\\n成功率: ${successRate}%`, colors.bold);\n        \n        if (this.failedTests === 0) {\n            log('\\n🎉 所有测试通过！系统准备就绪。', colors.green + colors.bold);\n            if (this.skippedTests > 0) {\n                log('💡 提示: 设置OPENAI_API_KEY环境变量以运行完整测试。', colors.yellow);\n            }\n        } else {\n            log('\\n⚠️  部分测试失败，请检查上述错误信息。', colors.red + colors.bold);\n            log('🔧 建议运行: npm run config:reset', colors.yellow);\n        }\n        \n        log('\\n🚀 启动增强CLI: npm start', colors.cyan);\n        log('📖 查看使用说明: README-ENHANCED.md', colors.cyan);\n    }\n}\n\n// 主函数\nasync function main() {\n    const testSuite = new TestSuite();\n    await testSuite.runAllTests();\n}\n\n// 错误处理\nprocess.on('unhandledRejection', (reason) => {\n    console.error('\\n❌ 未处理的Promise拒绝:', reason);\n    process.exit(1);\n});\n\nprocess.on('uncaughtException', (error) => {\n    console.error('\\n❌ 未捕获的异常:', error);\n    process.exit(1);\n});\n\n// 运行测试\nif (require.main === module) {\n    main().catch((error) => {\n        console.error('\\n❌ 测试执行失败:', error);\n        process.exit(1);\n    });\n}